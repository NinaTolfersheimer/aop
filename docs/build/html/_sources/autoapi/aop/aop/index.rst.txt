:py:mod:`aop.aop`
=================

.. py:module:: aop.aop

.. autoapi-nested-parse::

   :Author: Amélie Solveigh Hohe
   :Contact: nina.tolfersheimer@posteo.de

   This module contains the main classes and functions of the aop package.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   aop.aop.Session



Functions
~~~~~~~~~

.. autoapisummary::

   aop.aop.current_jd
   aop.aop.generate_observation_id
   aop.aop.create_entry_id
   aop.aop.parse_session



.. py:function:: current_jd(time: str = 'current') -> numpy.float64

   Returns the Julian Date for the current UTC or a custom datetime.

   It makes use of astropy's ``Time`` class to represent the datetime given as
   a Julian Date.

   :param time: An ISO 8601 conform string of the UTC datetime you want to be converted
       to a Julian Date. If ``time`` is "current", the current UTC
       datetime will be used, defaults to "current".
   :type time: ``str``, optional

   :raises TypeError: If the ``time`` argument is not of type ``str``.
   :raises InvalidTimeStringError: If the ``time`` argument is of type ``str`` but not interpretable as
       representing a time to astropy.time.Time.

   :return: The Julian Date corresponding to the datetime provided.
   :rtype: ``numpy.float64``


.. py:function:: generate_observation_id(digits: int = 10) -> str

   This function generates a unique observation ID.

   The ID is generated as such: YYYY-mm-dd-HH-MM-SS-uuuuuuuuuu,
   where:
       - YYYY: current UTC year
       - mm: current UTC month
       - dd: current UTC day
       - HH: current UTC hour
       - MM: current UTC minute
       - SS: current UTC second
       - uuuuuuuuuu: a ``digits``-long unique identifier (10 digits per default)

   :param digits: The number of digits to be used for the unique identifier part of
       the observation ID, defaults to 10.
   :type digits: ``int``, optional

   :return: The generated observation ID.
   :rtype: ``str``


.. py:function:: create_entry_id(time: str = 'current', digits: int = 30) -> str

   Creates a unique identifier for each and every entry in an .aop protocol.
   This identifier is unique even across observations.

   :param time: If equal to "current", the current UTC datetime is used for
       entry ID creation. You can also pass an ISO 8601 conform string to
       time, if the time of the entry is not the current time this method is
       called, defaults to "current".
   :type time: ``str``, optional
   :param digits: The number of digits to use for the unique part of the entry ID, defaults to 30.
   :type digits: ``int``, optional

   :raises TypeError: If time is not a string.
   :raises InvalidTimeStringError: If a string different from "current" is provided as ``time`` argument, but
       it is not ISO 8601 conform and therefore does not constitute a valid time string.

   :return: The entry ID generated. It follows the syntax YYYYMMDDhhmmssffffff-u,
       where:
           - YYYY   is the specified UTC year,
           - MM     is the specified UTC month,
           - DD     is the specified UTC day,
           - hh     is the specified UTC hour,
           - mm     is the specified UTC month,
           - ss     is the specified UTC second,
           - ffffff is the specified fraction of a UTC second and
           - u      represents 'digits' of unique identifier characters.
   :rtype: ``str``


.. py:class:: Session(filepath: str, **kwargs)

   A class representing an astronomical observing session.

   The Session class provides several public methods representing different
   actions and events that occur throughout an astronomical observation.
   It is logged according to the Astronomical Observation Protocol Standard v1.0.

   .. py:attribute:: started
      :value: False

      Whether the Session.start() method has already been called on this instance.


   .. py:attribute:: obsID

      The unique observation ID generated using the :func:`generate_observation_id()`
      function.


   .. py:attribute:: filepath

      The path where the implementing script wants aop to store its files. This could be a part of the implementing 
      script's installation directory, for example.


   .. py:attribute:: state

      A status flag indicating the current status of the observing session.
      The class methods set this flag to either
          - "running",
          - "aborted" or
          - "ended".
      Initialized in ``__init__()`` to None, updated in ``start()`` to "running".


   .. py:attribute:: interrupted
      :value: False

      A status flag indicating whether the session is currently interrupted.
      Initialized as False.


   .. py:attribute:: conditionDescription

      A short description of the observing conditions.


   .. py:attribute:: temp

      The temperature at the observing site in °C.


   .. py:attribute:: pressure

      The air pressure at the observing site in hPa.


   .. py:attribute:: humidity

      The air humidity at the observing site in %.


   .. py:method:: __repr__() -> str

      A Session object is represented by its attributes.

      :return: A string containing all the instance's attributes and their values
          in line format.
      :rtype: ``str``


   .. py:method:: start(time: str = 'current') -> None

      This method is called to start the observing session.

      By not starting the observation when a Session object is created, it is
      possible to prepare the Session object pre-observation as well as
      parse existing protocols from memory into a new Session object. It
      changes the Session's "state" flag to "running" (attribute and
      parameter), as well as generating an observation ID, setting up a
      directory for the protocol and parameter log to live in, and writing
      the initial files to that directory. It also writes a Session Event
      "SEEV SESSION %obsID% STARTED" to .aop.

      :param time: An ISO 8601 conform string of the UTC datetime you want your
          observation to start. Can also be "current", in which case the current
          UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises PermissionError: If the user does not have the adequate access rights for reading from or writing to the
          .aol or .aop file.
      :raises AopFileAlreadyExistsError: If the .aop file the method tries to create already exists.
      :raises AolFileAlreadyExistsError: If the .aol file the method tries to create already exists.


   .. py:method:: __write_to_aop(self, opcode: str, argument: str, time: str = 'current') -> None
      :staticmethod:

      This pseudo-private method is called to update the .aop protocol file.

      For the syntax, check with the Astronomical Observation Protocol Syntax
      Guide.

      :param opcode: The operation code of the event to be written to protocol, as
          described in the AOP Syntax Guide.
      :type opcode: ``str``
      :param argument: Whatever is to be written to the argument position in the .aop
          protocol entry.
      :type argument: ``str``
      :param time: An ISO 8601 conform string of the UTC datetime you want to use. Can also be "current", in which
          case the current UTC datetime will be used.
          In most cases, however, the calling method will pass its own time
          argument on to __write_to_aop(), defaults to "current".
      :type time: ``str``, optional

      :raises PermissionError: If the user does not have the adequate access rights for writing to the .aop file.


   .. py:method:: __write_to_aol(self, parameter: str, assigned_value) -> None
      :staticmethod:

      This pseudo-private method is used to update the .aol parameter log.

      It takes two arguments, the first being the parameter name being updated,
      the second one being the value it is assigned.

      :param parameter: The name of the parameter being updated.
      :type parameter: ``str``
      :param assigned_value: The value the parameter should be assigned. Typically, this
          is a string or boolean.
      :type assigned_value: any

      :raises PermissionError: If the user does not have the adequate access rights for reading from the .aol file.
      :raises PermissionError: If the user does not have the adequate access rights for writing to the .aol file.


   .. py:method:: interrupt(time: str = 'current') -> None

      This method interrupts the session.

      It sets the Session's ``interrupted`` flag to True in the instance
      attribute as well as the ``parameter`` attribute. After this, it writes a
      Session Event "SEEV SESSION INTERRUPTED" to the protocol and updates
      the .aol parameter log.

      :param time: An ISO 8601 conform string of the UTC datetime you want your
          observation to be interrupted at. Can also be "current", in which case
          the current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises NotInterruptableError: If the session is not currently "running".
      :raises AlreadyInterruptedError: If the session is already interrupted.


   .. py:method:: resume(time: str = 'current') -> None

      This method resumes the session.

      It sets the Session's ``interrupted`` flag to False in the instance
      attribute as well as the ``parameter`` attribute. After this, it writes a
      Session Event "SEEV SESSION RESUMED" to the protocol and updates the
      .aol parameter log.

      :param time: An ISO 8601 conform string of the UTC datetime you want your
          observation to be resumed at. Can also be "current", in which case the
          current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises NotResumableError: If the session is not currently "running".
      :raises NotInterruptedError: If the session is not interrupted.


   .. py:method:: abort(reason: str, time: str = 'current') -> None

      This method aborts the session while providing a reason for doing so.

      It sets the Session's ``state`` flag to "aborted" in the instance
      attribute as well as the ``parameter`` attribute. After this, it writes a
      Session Event "SEEV %reason%: SESSION %obsID% ABORTED" to the protocol
      and updates the .aol parameter log.

      :param reason: The reason why this session had to be aborted.
      :type reason: ``str``
      :param time: An ISO 8601 conform string of the UTC datetime you want your
          observation to be aborted at. Can also be "current", in which case the
          current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises NotAbortableError: If the session is not currently "running".


   .. py:method:: end(time: str = 'current') -> None

      This method is called to end the observing session.

      It sets the Session's ``state`` flag to "ended" in the instance
      attribute as well as the ``parameter`` attribute. After this, it writes a
      Session Event "SEEV SESSION %obsID% ENDED" to the protocol and updates
      the .aol parameter log.

      :param time: An ISO 8601 conform string of the UTC datetime you want your
          observation to be ended at. Can also be "current", in which case the
          current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises NotEndableError: If the session is not currently "running".


   .. py:method:: comment(comment: str, time: str = 'current') -> None

      This method adds an observer's comment to the protocol.

      It writes an Observer's Comment "OBSC %comment%" to the protocol, where
      the AOP argument is whatever string is passed as the 'comment' argument
      to the method verbatim.

      :param comment: Whatever you want your comment to read in the protocol.
      :type comment: ``str``
      :param time: An ISO 8601 conform string of the UTC datetime you want your
          comment to be added at. Can also be "current", in which case the
          current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises SessionStateError: If the session is not currently "running".


   .. py:method:: issue(severity: str, message: str, time: str = 'current') -> None

      This method is called to report an issue to the protocol.

      It evaluates the ``severity`` argument and after that writes the
      corresponding ISSU (Issue) to the protocol:
          * "potential"/"p": "ISSU Potential Issue: %message%"
          * "normal"/"n": "ISSU Normal Issue: %message%"
          * "major"/"m": "ISSU Major Issue: %message%"

      :param severity: An indicator of the issue's severity. It has to be one of the
          following strings:
              * "potential"
              * "p"
              * "normal"
              * "n"
              * "major"
              * "m".
      :type severity: ``str``
      :param message: A short description of the issue that is printed to the protocol
          verbatim.
      :type message: ``str``
      :param time: An ISO 8601 conform string of the UTC datetime you want your
          issue to be reported at. Can also be "current", in which case the
          current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises SessionStateError: If the session is not currently "running".
      :raises ValueError: If an improper value is passed in the 'severity' argument, that is
          anything different from:
              * "potential"
              * "p"
              * "normal"
              * "n"
              * "major"
              * "m".


   .. py:method:: point_to_name(targets: list, time: str = 'current') -> None

      This method indicates the pointing to a target identified by name.

      It starts by evaluating the 'targets' argument provided to the method
      and constructing a comma-separated list of targets, which is then
      written in the AOP argument position in the Pointing "POIN Pointing at
      target(s): %list of targets%" that is being written to the protocol.

      :param targets: A list object that contains whatever objects represent the targets,
          most likely strings, but it could be any other object.
      :type targets: ``list[any]``
      :param time: An ISO 8601 conform string of the UTC datetime you want your
          pointing to be reported at. Can also be "current", in which case the
          current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises SessionStateError: If the session is not currently "running".
      :raises TypeError: If the ``targets`` argument is not of type ``list``.


   .. py:method:: point_to_coords(ra: float, dec: float, time: str = 'current') -> None

      This method indicates the pointing to ICRS coordinates.

      It takes a 'ra' argument for right ascension and a 'dec' argument for
      declination. After that, a Pointing "Pointing at coordinates: R.A.:
      %ra% Dec.: %dec%" is written to the protocol. Provide decimal degrees
      for declination and decimal hours for right ascension.

      :param ra: Right ascension in the ICRS coordinate framework.
      :type ra: ``float``
      :param dec: Declination in the ICRS coordinate framework.
      :type dec: ``float``
      :param time: An ISO 8601 conform string of the UTC datetime you want your
          pointing to be reported at. Can also be "current", in which case the
          current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises SessionStateError: If the session is not currently "running".
      :raises TypeError: If 'ra' or 'dec' is not of type 'float'.
      :raises ValueError: If 'ra' is not 0.0h <= 'ra' < 24.0h.
      :raises ValueError: If 'dec' is not -90.0° <= 'dec' <= 90.0°.


   .. py:method:: take_frame(n: int, ftype: str, iso: int, expt: float, ap: float, time: str = 'current') -> None

      This method reports the taking of one or more frame(s) of the same target and the camera settings used.

      It evaluates the type of frame provided in the ``ftype`` parameter to
      arrive at a string to be written to the protocol as frame type:
          * "science frame"/"science"/"sf"/"s": "science"
          * "dark frame"/"dark"/"df"/"d": "dark"
          * "flat frame"/"flat"/"ff"/"f": "flat"
          * "bias frame"/"bias"/"bf"/"b": "bias"
          * "pointing frame"/"pointing"/"pf"/"p": "pointing"
      Finally, the method writes a Frame "FRAM %n% %frame type% frame(s)
      taken with settings: Exp.t.: %expt%s, Ap.: f/%ap%, ISO: %ISO%" to the
      protocol.

      :param n: Number of frames of the specified frame type and settings that were
          taken of the same target.
      :type n: ``int``
      :param ftype: Type of frame, ftype must not be anything other than:
              * "science frame"
              * "science"
              * "sf"
              * "s"
              * "dark frame"
              * "dark"
              * "df"
              * "d"
              * "flat frame"
              * "flat"
              * "ff"
              * "f"
              * "bias frame"
              * "bias"
              * "bf"
              * "b"
              * "pointing frame"
              * "pointing"
              * "pf"
              * "p".
      :type ftype: ``str``
      :param iso: ISO setting that was used for the frame(s).
      :type iso: ``int``
      :param ap: The denominator of the aperture setting that was used for the
          frame(s). For example, if f/5.6 was used, provide ap=5.6 to the
          method.
      :type ap: ``float``
      :param expt: Exposure time that was used for the frame(s), given in seconds.
      :type expt: ``float``
      :param time: An ISO 8601 conform string of the UTC datetime you want your
          frame(s) to be reported at. Can also be "current", in which case the
          current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises SessionStateError: If the session is not currently "running".
      :raises TypeError: If one of the parameters is not of the required type:
              * n: int
              * ftype: str
              * expt: float
              * ap: float
              * iso: int
      :raises ValueError:
          If an improper value is passed in the 'ftype' argument, that is
          anything other than:
              * "science frame"
              * "science"
              * "sf"
              * "s"
              * "dark frame"
              * "dark"
              * "df"
              * "d"
              * "flat frame"
              * "flat"
              * "ff"
              * "f"
              * "bias frame"
              * "bias"
              * "bf"
              * "b"
              * "pointing frame"
              * "pointing"
              * "pf"
              * "p".


   .. py:method:: condition_report(description: str = None, temp: float = None, pressure: float = None, humidity: float = None, time: str = 'current') -> None

      This method reports a condition description or measurement.

      Every argument is optional, just pass the values for the arguments you
      want to protocol. Each argument will be processed completely
      separately, so a separate protocol entry will be produced for every
      argument you provide. For each type of condition report, a
      corresponding flag will be set as an instance attribute as well as a
      parameter. This flag update will also be written to the parameter log.
      In case a description is provided, a Condition Description "CDES
      %description%" is written to the protocol, if a temperature, pressure
      or humidity is provided, however, a Condition Measurement is written to
      protocol for each measurement provided, respectively:
          - "CMES Temperature: %temp%°C" and/or
          - "CMES Air Pressure: %pressure% hPa" and/or
          - "CMES Air Humidity: %humidity%%"

      :param description: A short description of every relevant element influencing the
          overall observing description, but do not provide any measurements,
          as these are a Condition Measurement rather than a Condition
          Description, defaults to None.
      :type description: ``str``, optional
      :param temp: The measured temperature in °C, defaults to None.
      :type temp: ``float``, optional
      :param pressure: The measured air pressure in hPa, defaults to None.
      :type pressure: ``float``, optional
      :param humidity: The measured air humidity in %, defaults to None.
      :type humidity: ``float``, optional
      :param time: An ISO 8601 conform string of the UTC datetime you want your
          condition update to be reported at. Can also be "current", in which
          case the current UTC datetime will be used, defaults to "current".
      :type time: ``str``, optional

      :raises SessionNotStartedError: If the session has not yet been started.
      :raises SessionStateError: If the session is not currently "running".



.. py:function:: parse_session(filepath: str, session_id: str) -> Session

   This function parses a session from memory to a new Session object.

   Provided with the filepath to the general location where the protocol and
   log files are stored and an observation ID, it reads in the observation
   parameters from the session's parameter log. This information is then used
   to create a new Session object, which is returned by the function. If it
   has no observationID attribute, it is recreated from the function input.

   :param filepath: The path to the file where you expect the session directory to reside.
       This is most likely equivalent to the path passed to the Session class
       to create its files in, which in turn is most likely somewhere in the
       installation directory of the implementing script.
   :type filepath: str
   :param session_id: The observationID of the session to be parsed.
   :type session_id: str

   :raises AolNotFoundError: If there is no .aol file using the specified filepath and session_id.
   :raises SessionIdDoesntExistOnFilepathError: If the specified session_id is not in the filepath provided.
   :raises NotADirectoryError: If the specified filepath does not constitute a directory.

   :return: The new Session object parsed from the stored observation parameters.
       For all intents and purposes, this object is equivalent to the object
       whose parameters were used to parse, and you can use it to continue your
       observation session or protocol just the same. Just be careful not to
       run the Session.start() method again, as this would overwrite the
       existing protocol instead of continuing it!
   :rtype: Session


